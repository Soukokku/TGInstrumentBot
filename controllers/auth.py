from aiogram import types, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.filters.state import StateFilter
from DB import DB
import crud
from keyboards.inline import main_keyboard_prorab, main_keyboard_worker, get_objects_keyboard, approval_keyboard, get_back_keyboard

class RegisterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_object = State()

async def start_handler(message: types.Message, state: FSMContext):
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, message.chat.id)
    if user:
        role = user.role.name
        if role == "–ø—Ä–æ—Ä–∞–±":
            await message.answer("–í—ã –ø—Ä–æ—Ä–∞–±! –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ä–∞–±–∞.", reply_markup=main_keyboard_prorab)
        elif role == "—Ä–∞–±–æ—Ç–Ω–∏–∫":
            await message.answer("–í—ã —Ä–∞–±–æ—Ç–Ω–∏–∫! –ü–æ–∫–∞–∑—ã–≤–∞—é –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.", reply_markup=main_keyboard_worker)
        elif role == "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏":
            await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.")
        else:
            await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        await state.set_state(RegisterStates.waiting_for_name)

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    async with DB.db() as db:
        objects_list = await crud.get_objects_list(db)
    keyboard = get_objects_keyboard(objects_list)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:", reply_markup=keyboard)
    await state.set_state(RegisterStates.waiting_for_object)

async def process_object_callback(callback: types.CallbackQuery, state: FSMContext):
    object_name = callback.data.split("select_object:")[1]
    data = await state.get_data()
    full_name = data.get("full_name")
    tg_username = callback.from_user.username or ""
    chat_id = callback.from_user.id
    async with DB.db() as db:
        await crud.create_user_pending(db, chat_id, tg_username, full_name, object_name)
        object_obj = await crud.get_object_by_name(db, object_name)
        foreman = await crud.get_foreman_by_object(db, object_obj.id)
        if foreman:
            await callback.bot.send_message(
                foreman.chat_id,
                "–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–æ—Ä–∞–±—É.")
    await state.clear()
    await callback.answer()

async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, callback.from_user.id)
    if user and user.role.name == "–ø—Ä–æ—Ä–∞–±":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard_prorab)
    elif user and user.role.name == "—Ä–∞–±–æ—Ç–Ω–∏–∫":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard_worker)
    else:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()

async def show_pending_users(callback: types.CallbackQuery):
    async with DB.db() as db:
        users = await crud.get_pending_users(db)
    if not users:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", reply_markup=get_back_keyboard())
    else:
        for user in users:
            text = f"üë§ <b>{user.full_name}</b>\nüèóÔ∏è –û–±—ä–µ–∫—Ç: {user.object.name}"
            kb = approval_keyboard(user.id)
            await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await callback.answer()

async def approve_user_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    async with DB.db() as db:
        user = await crud.approve_user(db, user_id)
    await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç <b>{user.full_name}</b> –æ–¥–æ–±—Ä–µ–Ω–∞.", parse_mode="HTML")
    try:
        from keyboards.inline import main_keyboard_worker
        await callback.bot.send_message(
            user.chat_id,
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=main_keyboard_worker
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É: {e}")
    await callback.answer()

async def reject_user_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    async with DB.db() as db:
        await crud.reject_user(db, user_id)
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.message.register(start_handler, Command("start"))
    dp.message.register(process_name, StateFilter(RegisterStates.waiting_for_name))
    dp.callback_query.register(
        process_object_callback,
        lambda c: c.data and c.data.startswith("select_object:"),
        StateFilter(RegisterStates.waiting_for_object)
    )
    dp.callback_query.register(show_pending_users, lambda c: c.data == "zayavki")
    dp.callback_query.register(approve_user_callback, lambda c: c.data.startswith("approve_") and not c.data.startswith("approve_tool_"))
    dp.callback_query.register(reject_user_callback, lambda c: c.data.startswith("reject_") and not c.data.startswith("reject_tool_"))
    dp.callback_query.register(back_to_menu_callback, lambda c: c.data == "back_to_menu")
