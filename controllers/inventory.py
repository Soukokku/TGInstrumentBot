from aiogram import types, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from DB import DB
import crud
from keyboards.inline import get_back_keyboard, main_keyboard_prorab, main_keyboard_worker
from pyzbar.pyzbar import decode
from PIL import Image
import io
from aiogram.types import FSInputFile
import xml.etree.ElementTree as ET
from datetime import datetime
import tempfile
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload
from DB.models import User, Tool

class InventoryStates(StatesGroup):
    waiting_for_qr = State()

def get_inventory_keyboard():
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", callback_data="finish_inventory")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )

async def start_inventory(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=get_inventory_keyboard())
    await state.set_state(InventoryStates.waiting_for_qr)
    await state.update_data(scanned_tools=[])
    await callback.answer()

async def process_qr_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º.")
        return
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)
    image = Image.open(io.BytesIO(file_bytes.read()))
    decoded = decode(image)
    if not decoded:
        await message.answer("QR-–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    qr_data = decoded[0].data.decode("utf-8")
    async with DB.db() as db:
        tool = await crud.get_tool_by_qr(db, qr_data)
        if not tool:
            await message.answer("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º QR-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user = await crud.get_user_by_chat_id(db, message.chat.id)
        if tool.object_id != user.object_id:
            await message.answer("–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É –æ–±—ä–µ–∫—Ç—É.")
            return
        data = await state.get_data()
        scanned = set(data.get("scanned_tools", []))
        scanned.add(tool.id)
        await state.update_data(scanned_tools=list(scanned))
        await message.answer(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool.name} (—Å–µ—Ä–∏–π–Ω—ã–π: {tool.serial_number}) –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π.\n–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π QR-–∫–æ–¥ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é.", reply_markup=get_inventory_keyboard())

<<<<<<< HEAD
async def generate_inventory_statistics(db, user, scanned_tools):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    from sqlalchemy.orm import selectinload
    from sqlalchemy import select
    from DB.models import Tool, ToolStatus, User, Object
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—ä–µ–∫—Ç–æ–º
    user_result = await db.execute(
        select(User).options(selectinload(User.object)).where(User.id == user.id)
    )
    user_with_object = user_result.scalar_one_or_none()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
    result = await db.execute(
        select(Tool).options(selectinload(Tool.status)).where(Tool.object_id == user.object_id)
    )
    all_tools = result.scalars().all()
    
    total_tools = len(all_tools)
    scanned_count = len(scanned_tools)
    missing_count = total_tools - scanned_count
    
    # –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    missing_tools = []
    for tool in all_tools:
        if tool.id not in scanned_tools:
            missing_tools.append(tool.name)
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {}
    for tool in all_tools:
        status_name = tool.status.name if tool.status else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        status_counts[status_name] = status_counts.get(status_name, 0) + 1
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    found_percentage = (scanned_count / total_tools * 100) if total_tools > 0 else 0
    
    return {
        'total_tools': total_tools,
        'scanned_count': scanned_count,
        'missing_count': missing_count,
        'found_percentage': round(found_percentage, 1),
        'status_counts': status_counts,
        'object_name': user_with_object.object.name if user_with_object and user_with_object.object else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç",
        'missing_tools': missing_tools
    }

async def format_statistics_message(stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    message = f"üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
    message += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {stats['scanned_count']} –∏–∑ {stats['total_tools']}\n"
    message += f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {stats['missing_count']}\n"
    
    if stats['missing_tools']:
        message += f"\nüìã –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n"
        for tool in stats['missing_tools']:
            message += f"‚Ä¢ {tool}\n"
    
    return message

async def finish_inventory_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    scanned = set(data.get("scanned_tools", []))
    
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, callback.from_user.id)
        all_tools = await crud.get_tools_by_object(db, user.object_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
=======
async def finish_inventory_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    scanned = set(data.get("scanned_tools", []))
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, callback.from_user.id)
        all_tools = await crud.get_tools_by_object(db, user.object_id)
>>>>>>> 2b43ccfb846ddfd640f886d374a935c1c06660cf
        for tool in all_tools:
            if tool.id in scanned:
                await crud.set_tool_status(db, tool.id, "–≤ –Ω–∞–ª–∏—á–∏–∏")
            else:
                await crud.set_tool_status(db, tool.id, "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
<<<<<<< HEAD
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await generate_inventory_statistics(db, user, scanned)
        stats_message = await format_statistics_message(stats)
    
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await callback.message.answer(
        stats_message,
        parse_mode="Markdown",
=======
    await state.clear()
    await callback.message.answer(
        "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
>>>>>>> 2b43ccfb846ddfd640f886d374a935c1c06660cf
        reply_markup=main_keyboard_prorab
    )
    await callback.answer()

async def generate_inventory_xml(db, user):
    result = await db.execute(
        select(User).options(selectinload(User.object)).where(User.id == user.id)
    )
    user_with_object = result.scalar_one_or_none()
    object_ = user_with_object.object
    tools_result = await db.execute(
        select(Tool).options(selectinload(Tool.status)).where(Tool.object_id == user.object_id)
    )
    tools = tools_result.scalars().all()
    root = ET.Element("InventoryReport")
    ET.SubElement(root, "Date").text = datetime.now().strftime("%Y-%m-%d")
    ET.SubElement(root, "Object").text = object_.name
    ET.SubElement(root, "Foreman").text = user.full_name
    tools_el = ET.SubElement(root, "Tools")
    for tool in tools:
        tool_el = ET.SubElement(tools_el, "Tool")
        ET.SubElement(tool_el, "Name").text = tool.name
        ET.SubElement(tool_el, "SerialNumber").text = tool.serial_number or ""
        ET.SubElement(tool_el, "QRCode").text = tool.qr_code or ""
        ET.SubElement(tool_el, "Status").text = tool.status.name
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xml') as tmp:
        tree = ET.ElementTree(root)
        tree.write(tmp, encoding='utf-8', xml_declaration=True)
        return tmp.name

async def send_inventory_report(callback: types.CallbackQuery):
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, callback.from_user.id)
        xml_path = await generate_inventory_xml(db, user)
    xml_file = FSInputFile(xml_path)
    await callback.message.answer_document(xml_file, caption="XML-–æ—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏")
    await callback.answer()

async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    async with DB.db() as db:
        user = await crud.get_user_by_chat_id(db, callback.from_user.id)
    if user and user.role.name == "–ø—Ä–æ—Ä–∞–±":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard_prorab)
    elif user and user.role.name == "—Ä–∞–±–æ—Ç–Ω–∏–∫":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard_worker)
    else:
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.callback_query.register(start_inventory, lambda c: c.data == "inventarizatsiya")
    dp.message.register(process_qr_photo, StateFilter(InventoryStates.waiting_for_qr))
    dp.callback_query.register(finish_inventory_callback, lambda c: c.data == "finish_inventory")
    dp.callback_query.register(send_inventory_report, lambda c: c.data == "generate_xml_report")
    dp.callback_query.register(back_to_menu_callback, lambda c: c.data == "back_to_menu") 